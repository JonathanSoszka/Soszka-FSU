


Simulator Expectations:

The simulator will recieve a file of machine encoded instructions as shown below.

The first line has two decimal value numbers, the first number is the quantity of instructions,
the second is the quantity of data values following the instructions

The instructions are encoded in hexidecimal.

18 1
00008021
00008821
24020005
0000000c
af820000
8f920000
0232402a
11000006
24020005
0000000c
02028021
26310001
08000005
02002021
24020001
0000000c
2402000a
0000000c
00000005


# Decoding Instructions

To decode instructions the first step will be to convert from hexidecimal to binary.

once we have the binary instruction we can determine the instruction trying to be executed using the first 6 binary digits (opcode)
Based off the opcode we can determine the encoding format and the meaning of the rest of the binary string.

## Instruction Types


### R format
- Opcode(6), $rd(5), $rs(5), $rt(5), shamt(5), funct(6)
- combination of opcode, and funct determine instruction type
- takes 1 - 3 arguments ($rd, $rs, $rt), when argument is unused it == 0
- shamt unused in our cases

### I format
- Opcode(6), $rs(5), $rt(5), immediate(16)
- instruction defined soley by opcode, immediate can be either a literal, data word, or instruction address/offset
- offset values represent the number of instructions +/- away from the current.
 

### J format
- opcode(6), targaddr(26)
- performs a jump to the address passed. 

----------


# Registers

used to store numerical values used in computations. these can be handled with a simple array of ints/floats


# Logfile output

The log file starts with a list of all assembly instructions, This will require a conversion of hex -> asm instrunct.

After the summarry the executition begins, at the end of each instruction executrion we need to log the current PC value,
the instruction, and the register map status, aswell as the value of all data in memory. Finally we need to log 
"exiting simulator" on simulator exit.

insts:
   0: addiu     $s0,$zero,1
   1: addiu     $s1,$zero,0
   2: addiu     $v0,$zero,5
   3: syscall
   4: sw        $v0,0($gp)
   5: lw        $s2,0($gp)
   6: slt       $t0,$s1,$s2
   7: beq       $t0,$zero,7
   8: addiu     $v0,$zero,5
   9: syscall
  10: mult      $s0,$v0
  11: mflo      $s0
  12: addiu     $s1,$s1,1
  13: j 5
  14: addu      $a0,$s0,$zero
  15: addiu     $v0,$zero,1
  16: syscall
  17: addiu     $v0,$zero,10
  18: syscall

data:
  19: 0


PC: 8
inst: addiu     $v0,$zero,5

regs:
   $zero =     0     $at =     0     $v0 =     5     $v1 =     0
     $a0 =     0     $a1 =     0     $a2 =     0     $a3 =     0
     $t0 =     1     $t1 =     0     $t2 =     0     $t3 =     0
     $t4 =     0     $t5 =     0     $t6 =     0     $t7 =     0
     $s0 =     1     $s1 =     0     $s2 =     3     $s3 =     0
     $s4 =     0     $s5 =     0     $s6 =     0     $s7 =     0
     $t8 =     0     $t9 =     0     $k0 =     0     $k1 =     0
     $gp =    19     $sp =     0     $fp =     0     $ra =     0
     $lo =     0     $hi =     0

data memory:
   data[  0] =     3


# Error Output

We need to be able to identify the following errors and report on them

illegeal instruction: this can be detected in the default case statments for run()
illegal instruction address: this can be detected at the begging of the run() loop
illegal data address: this can be detected in sw and lw
integer divide by zero: this can be detected in div

outputs

illegeal instruction:         "could not find inst with opcode 20"  
illegal instruction address:  "PC is accessing illegal memory address 255"
illegal data address:         "store outside of data memory at address 20"
integer divide by zero:       "divide by zero for instruction at 11"







