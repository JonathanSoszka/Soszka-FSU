# Class Structure

## Simulator

- Main class
- default constructor with no arguments
- Open(file) method opens the target file for processing
- Run() method simulates the instructions in the designated file, throw error if no file is provided
- Parse() method iterates through the file using standard IO and creats two vectors of instructions, _Data, and _Text


# Run Steps (to be perfomed for each instruction)

-Get Opcode

 -if opcode == 0 then get $rd,$rs,$rt, and funct
 -else determine encoding type
 - if (i) then get $rs,$rt, and immediate
 - if (j) then get target addr
 - if syscall call syscall function


 -call instruction method with correct paramaters.

##Logging
 - GetAssemblyInst(std::string) // binary
	--Takes in a binary string and converts to Assembly instruction

 - GetSimulatorStatus()
	--Prints the regester and data status 


ParseFile()
{
  instructionLoop
  {
    _LogFile << i << ":" << GetAssemblyInst(machineCode)
  }
  DataLoop
  {
    _LogFile << i << ":" << BinaryToInt(HexToBinary(machineCode))
  }
}

Run()
{
  ParseFile();
  
  ..Logic to determine Instructions
}



## Error Handling


uset MippsExit(int errorCode, std::string errorMessage) to report error feedback


V1 Get simulator class framed and file I/O handled. Create vector for registers, and empty instruction functions (Done)
V2 Create methods for instruction decoding, call empty instruction functions (Done)
V3 Create First instruction functions and test simulator (Done)
V4 Add log file output (Done)
V5 Refactor gp to handle growing data(not needed)
V6 Error Handling(In progress)